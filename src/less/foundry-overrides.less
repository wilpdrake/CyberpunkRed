form {

  .notes,
  .hint {
    color: var(--cpr-text-foundry-hint) !important;
  }

  input {
    &::placeholder {
      color: var(--cpr-text-normal);
      opacity: 0.6;
    }

    .number {
      width: 1.875rem;
    }
  }

  .form-group {
    label {
      color: var(--cpr-text-window) !important;
    }
  }

  span.units {
    color: var(--cpr-text-hint) !important;
  }

  .form-group.slim {
    .form-fields {
      label {
        color: var(--cpr-text-hint) !important;
      }
    }
  }

  textarea:read-only {
    color: var(--cpr-text-hint);
  }

  textarea {
    color: var(--cpr-text-normal);
  }
}

.filepicker .display-modes {
  a {
    background: var(--cpr-background-editor-button);
  }

  a.active {
    background: var(--cpr-background-editor-button-selected);
    text-shadow: var(--cpr-text-foundry-hover);
  }
}

.filepicker .favorites .path {
  background: var(--cpr-background-foundry-input);
  color: var(--cpr-text-foundry-input);

  a.link[data-source]::before {
    color: var(--cpr-text-foundry-input);
  }
}

.card-control {
  color: var(--cpr-text-hint) !important;
}

// User config pop out
.user-config {
  font-family: var(--cpr-font-primary);

  .window-content {
    .directory-list {
      background: var(--cpr-background-box) !important;
      color: var(--cpr-text-normal) !important;
    }
  }
}

.actor-sheet,
.blackice-sheet,
.container-sheet,
.demon-sheet,
.dialog-sheet,
.item-sheet,
.mook-sheet {
  font-family: var(--cpr-font-primary);

  // Undo Foundry Base Style settings for elements
  img {
    border: none;
  }

  ol li {
    list-style-type: none;
  }

  a:hover {
    text-shadow: 0 0 0.5rem var(--cpr-background-foundry-hover);
  }

  input[type="text"],
  input[type="number"],
  input[type="password"],
  input[type="date"],
  input[type="time"] {
    border: none;
    outline: none;
    box-shadow: none;
    min-width: unset;
    margin: 0;
    line-height: inherit;
    user-select: text;
    border: none;
    height: 100%;
    background: none;

    &:hover {
      color: var(--cpr-text-foundry-hover) !important;
    }
  }
}

option,
optgroup {
  background: var(--cpr-background-window);
}

#invitation-links .connection.closed {
  color: var(--cpr-text-icon-highlight);
}

#module-management {
  label {
    color: var(--cpr-text-icon-normal) !important;
  }
}

#keybindings {
  .binding {
    .key.uneditable {
      background: var(--cpr-background-row-odd);
    }
  }
}

#actors-popout,
#cards-popout,
#chat-popout,
#combat-popout,
#compendium-popout,
#items-popout,
#journal-popout,
#playlists-popout,
#scenes-popout,
#settings-popout,
#tables-popout,
#macros-popout,
#ui-right {
  color: var(--cpr-text-header);

  button {
    color: var(--cpr-text-foundry-input);
    background-color: var(--cpr-background-foundry-input);
  }
}

#chat-form {
  textarea {
    background: none;
    color: var(--cpr-text-foundry-input);
    background-color: var(--cpr-background-foundry-input);
  }
}

#chat-controls {
  .roll-type-select {
    color: var(--cpr-text-foundry-input);
    background-color: var(--cpr-background-foundry-input);
  }
}

input[type="text"],
input[type="number"],
input[type="password"],
input[type="date"],
input[type="time"],
input[type="search"],
input,
select,
button,
.sidebar-tab .directory-header .header-search input,
.dialog .dialog-buttons button,
.dialog .dialog-buttons button.default {
  color: var(--cpr-text-foundry-input);
  background: var(--cpr-background-foundry-input);
}

input::placeholder {
  color: var(--cpr-text-normal);
}

.header-search {
  input {
    background: var(--cpr-background-foundry-input) !important;
  }
}

/*
 * Application V2 Overrides
 *
 * As of V12 Foundry has it's own dark/light mode based on the browser. In cases
 * where the user in in dark mode and the system is in light mode we want to correct
 * the styling for Foundry specific menus.
 */

html[data-cpr-theme="default"] body.theme-dark {
  form.region-config {
    label {
      color: #eaeaea !important;
    }

    .hint {
      color: #c0c0c0 !important;
    }
  }
}

html[data-cpr-theme="darkmode"] body.theme-light {
  form.region-config {
    label {
      color: var(--cpr-color-black) !important;
    }

    .hint {
      color: var(--cpr-color-near-black) !important;
    }
  }
}

/*
 * Prosemirror Overrides
 *
 * .prosemirror gets a lot of styling from the Journals section below as well
 * the rules here are specific to the editor that don't have styles in the
 * Journal section itself. If the Foundry devs use prosemirror for other editor
 * fields down the line we will need port them to this section or extend the
 * Journal section below to apply to other classes as well.
 */

.prosemirror,
.prosemirror.menu-dialog {
  form {
    color: var(--cpr-text-normal);
    background: var(--cpr-background-box);
  }

  menu {

    button,
    ul,
    .pm-dropdown {
      color: var(--cpr-text-foundry-input) !important;
      background: var(--cpr-background-editor-button) !important;

      // Set the color of the icons in the dropdowns
      i,
      i:hover {
        color: var(--cpr-text-foundry-input) !important;
      }

      li {
        &:hover {
          color: var(--cpr-text-foundry-input) !important;
          background: var(--cpr-background-editor-button-hover) !important;
        }
      }
    }

    button {
      &:active {
        color: var(--cpr-text-foundry-input) !important;
        background: var(--cpr-background-editor-button-active) !important;
      }

      &:hover {
        color: var(--cpr-text-foundry-input) !important;
        background: var(--cpr-background-editor-button-hover) !important;
      }
    }
  }

  .editor-container {
    height: 100%;
  }

  .editor-content {
    height: 100%;
    padding: 0rem;
  }
}

.editor.prosemirror {
  min-height: 10rem;
}

// Override the content link element use when linking to another foundry
// actor, item etc.
.content-link {
  background: var(--cpr-background-content-link) !important;
  color: var(--cpr-text-normal);

  i::before {
    color: var(--cpr-text-normal);
  }
}

/*
 * Journals
 */

// This is not in the general journal divs as you would expect
.journal-header {
  input {
    color: var(--cpr-text-chat-normal) !important;
    font-family: var(--cpr-font-journal-header);
    font-weight: 800;
    font-variant: small-caps;
  }
}

/*
 * TextEditor/Prosemirror Overides
 */

.journal-entry-content {
  background: var(--cpr-background-box) !important;
}

.prosemirror,
.editor-content,
.releasenotes,
.journal-entry-content,
.journal-page-content,
.journal-sheet-container {
  font-family: var(--cpr-font-primary);
  color: var(--cpr-text-normal) !important;

  // Normally we wouldn't use <strong> but it's how the WYSIWYG editor
  // does bold, style this to be more semi-bold.
  strong {
    font-weight: 550;
  }

  hr {
    border-bottom: 0.125rem solid var(--cpr-background-dialog-border);
  }

  // We don't want no stinkin' borders
  img {
    border: none;
  }

  // This only supports tables with alternating color rows (90% of tables in the
  // the book), will need some more rules for alternating color columns.
  //
  // This mess is because when using the markdown editor (vs. TinyMCE /
  // Prosemirror) it add a 'thead' element so we need to account for that when
  // coloring the rows. The only difference is that tables with a 'thead' start
  // with pink rows rather than white rows. This shouldn't really matter as
  // they should be consistent across all uses of tables with 'thead'.

  /* First row of every table */
  table tr:first-of-type {
    color: var(--cpr-text-journal-table-header);
    background: var(--cpr-background-dialog-border);
    font-weight: 550;
    text-align: left;
    text-shadow: none;
  }

  table thead+tbody tr:first-of-type {
    background-color: blue;
  }

  table tbody tr:nth-of-type(even):not(:first-of-type),
  table thead+tbody tr:nth-of-type(2n) {
    color: var(--cpr-text-normal);
    background: var(--cpr-background-row-even);
  }

  table tbody tr:nth-of-type(odd):not(:first-of-type),
  table thead+tbody tr:nth-of-type(2n + 1) {
    color: var(--cpr-text-normal);
    background: var(--cpr-background-row-odd);
    font-weight: 400;
  }

  table {

    tr,
    td,
    th {
      border: 0.313rem solid var(--cpr-background-dialog-border) !important;
      padding: 0.313rem !important;
    }
  }

  .journal-sidebar {
    .pages-list {

      .directory-item.active:first-of-type,
      .directory-item.active+ :not(.active) {
        border-top: 0.063rem solid var(--cpr-background-dialog-border);
      }
    }
  }

  // Catchall for headers
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  .journal-header,
  .journal-header input {
    color: var(--cpr-text-chat-normal) !important;
    font-family: var(--cpr-font-journal-header);
    font-weight: 800;
    font-variant: small-caps;
  }

  h1 {
    position: relative;
    border-bottom: 1.57rem solid var(--cpr-text-header-line);
    font-size: 2rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
    margin-left: -0.26rem;

    &::first-letter {
      float: left;
      font-size: 4.688rem;
      line-height: 3.75rem;
      padding-top: 0.625rem;
    }

    &::after {
      content: "";
      display: inline-block;
      width: 1.57rem;
      height: 1.57rem;
      position: absolute;
      bottom: -1.57rem;
      right: -0.063rem;
      background-color: var(--cpr-text-header-line-box);
      margin-left: 0.313rem;
    }
  }

  h2 {
    position: relative;
    border-bottom: 0.313rem solid var(--cpr-text-header-line);
    font-size: 2rem;
    margin-top: 1rem;
    margin-bottom: 1rem;

    &::after {
      content: "";
      display: inline-block;
      width: 1.57rem;
      height: 1.57rem;
      position: absolute;
      bottom: -0.87rem;
      right: -0.063rem;
      background-color: var(--cpr-text-header-line);
      margin-left: 0.313rem;
    }
  }

  h3 {
    border-bottom: none;
    font-size: 1.80rem;
    margin-top: 1rem;
    margin-bottom: 1rem;

    &::before {
      content: "▶ ";
      color: var(--cpr-text-header-arrow);
    }
  }

  h4 {
    text-align: center;
    border-bottom: none;
    font-size: 1.80rem;
    margin-top: 1rem;
    margin-bottom: 1rem;

    &::before {
      content: "▶ ";
      color: var(--cpr-text-header-arrow);
    }

    &::after {
      content: " ◀";
      color: var(--cpr-text-header-arrow);
    }
  }

  h5 {
    text-align: center;
    border-bottom: none;
    font-size: 1.80rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  h6 {
    border-bottom: none;
    font-size: 1.80rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  blockquote {
    padding: 0.313rem 0.313rem 0.313rem 1.25rem;
    background: var(--cpr-background-journal-blockquote);
  }

  .secret {
    border: 0.125rem dashed var(--cpr-background-journal-secret-hidden-border);
    background-color: var(--cpr-background-journal-secret-hidden-background);
  }

  section.secret.revealed {
    border: 0rem;
    background: var(--cpr-background-box);
  }

  // This isn't supported by the GUI editors but can be done when editing the HTML
  // But it allows us to create nice info boxes in journals as needed.
  section.info::before {
    content: "ℹ️";
    position: absolute;
    margin: 0.5rem 0rem 0rem -1.45rem;
  }

  section.info {
    padding: 0.313rem 0.313rem 0.313rem 2rem;
    background: var(--cpr-background-journal-info);
    border-radius: 0.313rem;
    margin: 0.313rem 0rem;
  }
}

/*
 * Tooltips, accessed via the `data-tooltip` element
 */
#tooltip {
  font-family: var(--cpr-font-primary);
  padding: 0.313rem 0.626rem;
  border: 0rem;
  border-radius: 0rem;
  background: var(--cpr-background-header);
  clip-path: polygon(0 0.626rem, 0 100%, 100% 100%, 100% 0, 0.626rem 0);
}

/* -------------------------------------------- */
/* Override pause menu with glitch effect       */
/* IF enabled in settings.enablePauseAnimation  */
/* -------------------------------------------- */
#pause {
  .pause-image {
    background: url("icons/pause.png");
    background-size: 8rem;
    width: 8rem;
    height: 8rem;
    padding-left: 8rem;
  }

  .pause-glitch {
    .glitch;
    text-transform: uppercase;
    font-family: var(--cpr-font-pause);
    font-weight: 800;
    color: var(--cpr-text-pause);

    &::before,
    &::after {
      content: attr(data-text);
    }
  }
}
